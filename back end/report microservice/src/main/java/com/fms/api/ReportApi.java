/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.16).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package com.fms.api;

import com.fms.model.Report;
import com.fasterxml.jackson.databind.ObjectMapper;
import io.swagger.annotations.*;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.bind.annotation.CookieValue;

import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;
import javax.validation.constraints.*;
import java.io.IOException;
import java.util.List;
import java.util.Map;
import java.util.Optional;
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2020-01-27T17:18:52.993+05:30[Asia/Calcutta]")
@Api(value = "report", description = "the report API")
public interface ReportApi {

    Logger log = LoggerFactory.getLogger(ReportApi.class);

    default Optional<ObjectMapper> getObjectMapper(){
        return Optional.empty();
    }

    default Optional<HttpServletRequest> getRequest(){
        return Optional.empty();
    }

    default Optional<String> getAcceptHeader() {
        return getRequest().map(r -> r.getHeader("Accept"));
    }

    @ApiOperation(value = "Provide all the event report", nickname = "getAllEventReportsUsingGET", notes = "All the event reports are fetched", response = Report.class, responseContainer = "List", tags={ "report-controller", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = Report.class, responseContainer = "List"),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Not Found") })
    @RequestMapping(value = "/report",
        produces = { "*/*" }, 
        method = RequestMethod.GET)
    default ResponseEntity<List<Report>> getAllEventReportsUsingGET() {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("[ {\r\n  \"rating\" : \"rating\",\r\n  \"event\" : {\r\n    \"base_location\" : \"base_location\",\r\n    \"total_volunteers\" : 5,\r\n    \"total_volunteer_hour\" : 1,\r\n    \"event_id\" : 0,\r\n    \"venue_address\" : \"venue_address\",\r\n    \"total_travel_hour\" : 6,\r\n    \"event_date\" : \"2000-01-23T04:56:07.000+00:00\",\r\n    \"event_name\" : \"event_name\",\r\n    \"event_status\" : \"event_status\"\r\n  }\r\n}, {\r\n  \"rating\" : \"rating\",\r\n  \"event\" : {\r\n    \"base_location\" : \"base_location\",\r\n    \"total_volunteers\" : 5,\r\n    \"total_volunteer_hour\" : 1,\r\n    \"event_id\" : 0,\r\n    \"venue_address\" : \"venue_address\",\r\n    \"total_travel_hour\" : 6,\r\n    \"event_date\" : \"2000-01-23T04:56:07.000+00:00\",\r\n    \"event_name\" : \"event_name\",\r\n    \"event_status\" : \"event_status\"\r\n  }\r\n} ]", List.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default ReportApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "To filter the report", nickname = "reportFilterUsingPOST", notes = "Put the report filter in the body", response = Report.class, responseContainer = "List", tags={ "report-controller", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = Report.class, responseContainer = "List"),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Not Found") })
    @RequestMapping(value = "/report",
        produces = { "*/*" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<List<Report>> reportFilterUsingPOST(@ApiParam(value = "Give the report filter details" ,required=true )  @Valid @RequestBody Report body
) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("[ {\r\n  \"rating\" : \"rating\",\r\n  \"event\" : {\r\n    \"base_location\" : \"base_location\",\r\n    \"total_volunteers\" : 5,\r\n    \"total_volunteer_hour\" : 1,\r\n    \"event_id\" : 0,\r\n    \"venue_address\" : \"venue_address\",\r\n    \"total_travel_hour\" : 6,\r\n    \"event_date\" : \"2000-01-23T04:56:07.000+00:00\",\r\n    \"event_name\" : \"event_name\",\r\n    \"event_status\" : \"event_status\"\r\n  }\r\n}, {\r\n  \"rating\" : \"rating\",\r\n  \"event\" : {\r\n    \"base_location\" : \"base_location\",\r\n    \"total_volunteers\" : 5,\r\n    \"total_volunteer_hour\" : 1,\r\n    \"event_id\" : 0,\r\n    \"venue_address\" : \"venue_address\",\r\n    \"total_travel_hour\" : 6,\r\n    \"event_date\" : \"2000-01-23T04:56:07.000+00:00\",\r\n    \"event_name\" : \"event_name\",\r\n    \"event_status\" : \"event_status\"\r\n  }\r\n} ]", List.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default ReportApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }

}
